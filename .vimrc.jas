" Stuff that I like in vim  --Jas
" Created by .bashrc.jas JAS_ROX=20170806

" set number

"set autoindent
set cindent
set autoread      " automatically read externally modified files
set autowrite     " write when leaving buffer
set autowriteall  " write when leaving buffer (always)
set background=dark
set backspace=indent,eol,start
set backup        " backup files
set cmdheight=2
set expandtab
if has("foldenable")
        set foldenable
        set foldmethod=syntax
endif
set history=100
set hlsearch
set ignorecase
set smartcase
set incsearch
set joinspaces
set modeline
set nocompatible
set pastetoggle=<F2>
set printoptions=paper:letter,duplex:off,formfeed:y  " <CTRL-L> for <FF>
set ruler
set shiftround
set shiftwidth=8
set showcmd
set showmatch
set tabstop=8
set textwidth=70
set viminfo='20,\"50

if has("syntax")
        syntax on
endif
if has("filetype")
        filetype plugin indent on
endif

set formatoptions+=tn
set formatoptions-=l

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out

" Add tags file for headers in /usr/include .  This should be
" generated by .bashrc.jas .
set tags+=/home/jas/.vim/systags

" shortcuts I use:
" remap 'gf' to create the file under the cursor if it doesn't exist:
map gf :e <cfile><CR>
" Format current line using 'fmt':
map ff !!fmt<CR>
" Format the comments on the current line using 'fmt':
map ff/ !!fmt<CR>jI// <ESC>
map ff# !!fmt<CR>jI# <ESC>
" Join strings from line below: ,J for strings, ;J for comments
map ,J JxxX
map ;J Jwdw
" Format current xml line to be indented:
map xml !!XMLLINT_INDENT="    " xmllint --format -<CR>dd
" Condrey's lprintf() looks terrible after it has been jasindent'd:
map lp JffA "<ESC>jI           "<ESC>Jff
" For C++ files:  change 'x(y);\n' to 'x = y;\n'
map c( 0f(s = <ESC>$X
" For C++ files:  change 'x = y;\n' to 'x(y);\n'
map c= 0t=c2w(<ESC>$i)<ESC>
" Goto next/prev fold
map z<Down> zj
map z<Up> zk

" Add ^W deletions in insert mode into the undo tree:
inoremap <C-W> <C-G>u<C-W>

if has("autocmd")
        if exists("+omnifunc")
                "autocmd Filetype *
                "    \   if &omnifunc == "" |
                "    \           setlocal omnifunc=syntaxcomplete#Complete |
                "    \   endif
                set ofu=syntaxcomplete#Complete
        endif
        " To use syntax highlighting with Wikipedia
        " (see http://en.wikipedia.org/wiki/Wikipedia:Text_editor_support#Vim )
        " or
        " git clone https://github.com/vim-scripts/mediawiki.vim.git
        " ln -s mediawiki.vim/syntax/mediawiki.vim ~/.vim/syntax
        " ln -s mediawiki.vim/ftdetect/mediawiki.vim ~/.vim/ftdetect
        autocmd BufRead,BufNewFile *.wiki setfiletype Wikipedia

        " When creating new files, base them on the following template
        " files:

        "autocmd BufNewFile *.c so /home/jas/.vim/templates/src.c
        "autocmd BufNewFile *.cpp so /home/jas/.vim/templates/src.c
        autocmd BufNewFile *.c{,pp} so /home/jas/.vim/templates/src.c
        "autocmd BufNewFile *.h so /home/jas/.vim/templates/src.h
        "autocmd BufNewFile *.hpp so /home/jas/.vim/templates/src.h
        autocmd BufNewFile *.h{,pp} so /home/jas/.vim/templates/src.h
        autocmd BufNewFile *.sh so /home/jas/.vim/templates/src.sh
        au BufNewFile *.h{,pp} exe "%s/FILE_/" . tr( expand("%:t"), "a-z.", "A-Z_")
        autocmd BufNewFile *.[ch]{,pp} exe "%s/FILE/" . expand("%:t")
        autocmd BufNewFile *.sh exe "%s/FILE/" . expand("%:t")
        autocmd BufWritePre,FileWritePre *.[ch]{,pp} exe "normal ma"
        autocmd BufWritePre,FileWritePre *.sh exe "normal ma"
        autocmd BufWritePost,FileWritePost *.[ch]{,pp} exe "normal 'a"
        autocmd BufWritePost,FileWritePost *.sh exe "normal 'a"

        autocmd FocusLost * silent wall  " gvim:  write on loss of focus

        augroup make
                autocmd FileType make setlocal foldmethod=indent
                autocmd FileType make setlocal noexpandtab
        augroup END
endif

" From distrocast's JD:
"
"put this in your /etc/vimrc (or your distros' version of it):
"
"if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
"   set fileencodings=utf-8,latin1
"endif
"
"set nocompatible    " Use Vim defaults (much better!)
"set bs=indent,eol,start     " allow backspacing over everything in insert mode
""set ai         " always set autoindenting on
""set backup     " keep a backup file
"set viminfo='20,\"50    " read/write a .viminfo file, don't store more
"            " than 50 lines of registers
"set history=50      " keep 50 lines of command line history
"set ruler       " show the cursor position all the time
"
"" Only do this part when compiled with support for autocommands
"if has("autocmd")
"  " In text files, always limit the width of text to 78 characters
"  autocmd BufRead *.txt set tw=78
"  " When editing a file, always jump to the last cursor position
"  autocmd BufReadPost *
"  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
"  \   exe "normal! g'\"" |
"  \ endif
"endif
"
"if has("cscope") && filereadable("/usr/bin/cscope")
"   set csprg=/usr/bin/cscope
"   set csto=0
"   set cst
"   set nocsverb
"   " add any database in current directory
"   if filereadable("cscope.out")
"      cs add cscope.out
"   " else add database pointed to by environment
"   elseif $CSCOPE_DB != ""
"      cs add $CSCOPE_DB
"   endif
"   set csverb
"endif
"
"" Switch syntax highlighting on, when the terminal has colors
"" Also switch on highlighting the last used search pattern.
"if &t_Co > 2 || has("gui_running")
"  syntax on
"  set hlsearch
"endif
"
"
"
"put this in your ~/.vimrc:
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Vimrc File                                                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set nocompatible
"filetype on
"set history=1000
"set cf
"set ffs=unix,dos,mac
"filetype indent plugin on
""set foldmethod=indent
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" Theme Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set background=dark
"syntax on
"colorscheme easydark
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" UI Tweaks
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set lsp=0
"set ruler
"set cmdheight=2
"set backspace=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" Visual Reference
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set showmatch
"set mat=10
"set nohlsearch
"set incsearch
"set novisualbell
"set noerrorbells
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [HEX=\%02.2B]\ [BUF=\#%n]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
"set laststatus=2
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" Layout
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set ai
"set cindent
"set tabstop=4
"set softtabstop=4
"set shiftwidth=4
"set noexpandtab
"set nowrap
"set smarttab
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" Macros
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"map <F3> gg=G:w<cr>
"map <F4> :q!<cr>
"map <F5> ZZ
"map <F6> :TlistToggle<cr>
"map <F7> :BufExplorerVerticalSplit<cr>
"map <F8> :set paste<CR>
"map <F9> :set nopaste<CR>
"imap <F8> <C-O>:set paste<CR>
"imap <F9> <nop>
"set pastetoggle=<F9>
"
"" JD options
"" Sets a actual menu for tab-completion.
"set wildmenu
"
"" Allow backgrounding buffers without writing them. This makes multi-buffer
"" not a pain in the ass. It also remembers marks for backgrounded buffers.
"set hidden
"
"" Wrap on arrowkeys as well as backspace and space (defaults)
"set whichwrap=<,>,[,],b,s

" From Damian Conway, "More Instantly Better Vim" - OSCON 2013
" https://www.youtube.com/watch?v=aHm36-na4-4
" https://is.gd/IBV2013
" https://docs.google.com/file/d/0Bx3f0gFZh5Jqc0MtcUstV3BKdTQ/edit

" Make column 75 stand out
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%75v', 100)

" This rewires n and N to do the highlighing...
nnoremap <silent> n   n:call HLNext(0.1)<cr>
nnoremap <silent> N   N:call HLNext(0.1)<cr>

" Highlight the match in red...
function! HLNext (blinktime)
        highlight WhiteOnRed ctermfg=white ctermbg=red
        let [bufnum, lnum, col, off] = getpos('.')
        let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
        let target_pat = '\c\%#\%('.@/.'\)'
        let ring = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        call matchdelete(ring)
        redraw
        " Twice:
        exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        let [bufnum, lnum, col, off] = getpos('.')
        let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
        let target_pat = '\c\%#\%('.@/.'\)'
        let ring = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        call matchdelete(ring)
        redraw
endfunction

" Make tabs, trailing whitespace, and non-breaking spaces visible
" \u2423 is "open box" symbol for spaces
"exec "se listchars=tab:\u21E5\uB7,trail:\u2423,nbsp:\u2423"
" \uB7 is "middle dot" symbol for spaces
exec "se listchars=tab:\u21E5\uB7,trail:\uB7,nbsp:\uB7"
set list

" Swap v and CTRL-V, because Block mode is more useful than Visual mode

nnoremap    v   <C-V>
nnoremap <C-V>     v
vnoremap    v   <C-V>
vnoremap <C-V>     v

" Based on Conway's talk, vim-autoswap will switch to the correct
" window without the "existing swap file" error message.  Requires
" that 'wmctrl' be installed on the system.
" https://github.com/gioele/vim-autoswap
" pre-download above's plugin/autoswap.vim file and put it in
" ~/.vim/plugin
set title titlestring=

" Translate a list to bullets or vice-versa.
" Above referenced tarball assumed to be extracted in ~/src and
" symlinked to ~/.vim/plugin
nmap  ;l  :call ListTrans_toggle_format()<CR>
vmap  ;l  :call ListTrans_toggle_format('visual')<CR>

" Visual mode math.
" Above referenced tarball assumed to be extracted in ~/src and
" symlinked to ~/.vim/plugin
vmap <expr>  ++  VMATH_YankAndAnalyse()
nmap         ++  vip++

